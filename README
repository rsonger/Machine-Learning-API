# Machine Learning API with Django

This is my own work following the "Deploy Machine Learning Models with Django" tutorial by [Piotr Płoński](https://github.com/pplonski) at deploymachinelearning.com.

The original tutorial briefly covers a large number of topics and has a few issues, so this version improves upon the original in a number of ways.

## Improvements from the Tutorial

1. Newer versions of various software packages are used over the ones that were available in 2019 when the original tutorial was written. Namely, Django 4.0.3 is used instead of the specified 2.2.4 from the tutorial. See `requirements.txt` for other software versions.
2. This project does not create a `backend` directory for the `server` Django project as it appears in the tutorial that the `backend` directory contains nothing other than the Django project itself.
3. The data training notebook `Data Training.ipynb` uses an `OrdinalEncoder` to encode categorical data instead of the `LabelEncoder` used in the tutorial. The [sklearn docs](https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.LabelEncoder.html) for `LabelEncoder` explains why: 
    > This transformer should be used to encode target values, *i.e.* `y`, and not the input `X`.
4. The data training notebook `Data Training.ipynb` trains the `OrdinalEncoder` on the full set of inputs `X` instead of only using `X_train` as in the tutorial. This solves the issue that occurs when `X_test` contains unique values that are not also found in `X_train`. So the encoder must be trained on the full set of possible values for all input features.
5.  The data training notebook `Data Training.ipynb` takes one additional step after training the algorithms to evaluate their accuracy with `sklearn.metrics.confusion_matrix`.
6.  The Django apps `endpoints` and `ml` exist at the top of the `server` Django directory instead of creating a new `app` directory just to hold Django apps.
7.  A number of `CharField` attributes in `endpoints/models.py` were changed to `TextField` which is more appropriate for strings of significant length, and `max_length` parameters were removed from `MLAlgoithm.description` and `MLAlgorithm.code`.
8.  A `Meta` class was added to a number of models to improve readability in the generated pages.
9.  Docstrings were added in various places to improve understanding.
10. Replaced hardcoding of relative paths with `pathlib.Path` in places such as `ml.income_classifier.random_forest`.
11. 